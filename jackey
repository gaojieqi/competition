import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data


def conv2d(x,W):

    return tf.nn.conv2d(x,W,strides=[1,1,1,1],padding='SAME')

def maxpool2d(x):

    return tf.nn.max_pool(x,ksize=[1,2,2,1],strides=[1,2,2,1],padding='SAME')

def convolutional_neural_network(x):
    weights={'W_conv1':tf.Variable(tf.random_normal([5,5,1,10])),
            'W_conv2':tf.Variable(tf.random_normal([5,5,10,10])),
             'W_fc':tf.Variable(tf.random_normal([7*7*10,10])),
             'out': tf.Variable(tf.random_normal([10,n_classes]))
             }

    biases = {'b_conv1': tf.Variable(tf.random_normal([10])),
               'b_conv2': tf.Variable(tf.random_normal([10])),
               'b_fc': tf.Variable(tf.random_normal([10])),
               'out': tf.Variable(tf.random_normal([n_classes]))
               }
    x=tf.reshape(x,shape=[-1,28,28,1])
    conv1=conv2d(x,weights['W_conv1'])+biases['b_conv1']
    conv1=maxpool2d(conv1)
    conv2 = conv2d(conv1, weights['W_conv2'])+biases['b_conv2']
    conv2 = maxpool2d(conv2)
    fc=tf.reshape(conv2,[-1,7*7*10])
    print
    fc=tf.nn.relu(tf.matmul(fc,weights['W_fc']+biases['b_fc']))
    fc=tf.nn.dropout(fc,keep_rate)
    output=tf.matmul(fc,weights['out']+biases['out'])
    return output



mnist= input_data.read_data_sets("/tmp/data/",one_hot=True)
sess=tf.InteractiveSession()
n_nodes_hl1=500
n_nodes_hl2=500
n_nodes_hl3=500
n_classes=10
batch_size=100
feature_num=784
x=tf.placeholder('float',[None,feature_num])
y=tf.placeholder('float')
keep_rate= 0.8
keep_prob=tf.placeholder(tf.float32)
hm_epochs = 10

prediction = convolutional_neural_network(x)
cost=tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(prediction,Y))
optimizer=tf.train.AdamOptimizer().minimize(cost)
hm_epochs=30
# -------------------save model-------------
sess.run(tf.initialize_all_variables())
for epoch in range(hm_epochs):
    epoch_loss = 0
    for _ in range(int(mnist.train.num_examples / batch_size)):
        epoch_x, epoch_y = mnist.train.next_batch(batch_size)
        _, c = sess.run([optimizer, cost], feed_dict={x: epoch_x, y: epoch_y})
        epoch_loss += c
    print('Epoch', epoch, 'completed out of', hm_epochs, 'loss:', epoch_loss)

correct = tf.equal(tf.argmax(prediction, 1), tf.argmax(y, 1))
accuracy = tf.reduce_mean(tf.cast(correct, 'float'))
print sess.run(accuracy, {x: mnist.test.images, y: mnist.test.labels})
saver=tf.train.Saver()
saver.save(sess,'Convvolutional_Neural_Network.model')

#-------------------load model-------------
# saver=tf.train.Saver()
# saver.restore(sess,'Neural_Network.model')










